-------------------------- 복습 내용 -----------------------------
1. GithubAuction 사용
  -. github에서 제공하는 CI/CD 서비스 (CI/CD는 코드 통합 배포 서비스)
  -. 소프트웨어 개발 워크플로우 자동화 가능
  -. 설정이 간단하고, GitHub Repository와 밀접하게 통합되어 코드 변경사항에 대해 자동으로 빌드, 테스트, 배포 과정을 진행 가능
  -. 마켓플레이스에서 다양한 액션을 찾아서 워크플로우에 추가 가능하여 유연,확장성이 높다.

2. AWS colud ECR 사용
  -. ECR은 AWS에서 제공하는 도커 컨테이너 이미지를 저장, 관리, 배포 할수 있는 완전 관리형 컨테이너 이미지 레지스트리 서비스이다.

3. 컨테이너는 왜사용하며 왜 필요할까?
  -. 컴퓨터 한대에 한 애플리케이션 실행을 담당하는 것이 일반적이며, 프로세스도 오래 걸린다.
  -. 가상화(VM)를 사용하여 하나의 컴퓨터에서 여러 애플리케이션을 구현
  -. 컨테이너는 가상화(VM)과 다른 방법을 사용해서 효율 성능이 더 나아진 게 컨테이너다.
    -> 컨테이너 가상화는 코드,런타임, 시스템도구, 시스템 라이브러리 등을 포함한 가벼운 격리된 환경을 생성하는 기술이다.
    ->  리눅스의 핵심 격리 기술을 기반으로 하여, 하나의 리눅스 커널 위에서 여러 개의 독립적인 사용자 공간 인스턴스를 실행할 수 있게 해준다. 
        (커널은 프로세스의 생성 관리 소멸를 맡아서함)

  -. 이미지란??
    -> Docker 컨테이너 이미지는 코드, 런타임, 시스템 도구, 시스템 라이브러리 및 설정 등 애플리케이션을 실행하는데 필요한 모든 것을 포함하는 경량의 독립형 실행 가능 소프트웨어 패키지입니다.

  -. 도커엔진이란? 컨테이너를 생성하고 관리하는 기능을 제공하는 클로이언트-서버 형태의 애플리케이션이다. 
    -> 도커엔진은 다음과 같이 3가지로 이루어져 있다.
      1-1 도커데몬 :  컨테이너 관리를 위한 백그라운드 프로세스로, 이미지 생성, 컨테이너 실행, 네트워크 설정 등의 작업
                      을 수행한다. 이는 컨테이너의 생성, 실행, 중지와 같은 생명 주기를 관리한다. 또한, 이미지를 빌드하고 저장소에서
                      이미지를 가져오는 역할을 수행한다. 도커 데몬은 다른 도커 클라이언트의 명령을 수행하기 위해 REST API를 통
                      해 접근할 수 있다.

      1.2 Rest API : 도커 데몬과 통신하는 인터페이스로, 이 API를 통해 다양한 도커 클라이언트가 도커 데몬과 상호작용할 수 있다. 이를 통해 애플리케이션의 배포, 관리, 확장을 위한 다양한 명령을 수행할 수 있다.

      1.3 CLI 클라이언트 : 사용자가 커맨드 라인을 통해 도커 엔진과 상호작용할 수 있게 하는 인터페이스다. 사용자는 이를 통해 컨테이너를 생성하고 관리할 수 있으며, 이미지를 빌드하고 도커 허브 같은 이미지 저장소와 상호작용할 수있다.

  4. [용어] 다시 정리
      Docker Image
      도커 이미지는 컨테이너를 실행하기 위한 불변의 템플릿이다. 이 이미지는 애플리케이션 실행에 필요한 모든 것을 포함한다 — 코드, 런타임, 애플리케이션과 관련된 라이브러리, 환경 변수 및 설정 파일 등. 도
      커 이미지는 여러 계층으로 구성되어 있으며, 각 계층은 변경 사항을 저장한다. 이미지는 컨테이너를 생성하는 데 사용되며, 일반적으로 도커허브와 같은 레지스트리에서 가져오거나 Dockerfile 을 사용해직접 빌드할 수 있다.

      Docker container
      도커 컨테이너는 도커 이미지의 실행 인스턴스이다. 컨테이너는 이미지를 기반으로 하여 실행되며, 격리 된 환경에서 애플리케이션과 그 의존성을 캡슐화한다. 컨테이너는 가벼우며 시스템 리소스를 효율적으
      로 사용한다는 장점이 있다. 컨테이너는 시작될 때 생성되고 종료될 때 제거된다. 개발자는 동일한 이미지를 사용하여 여러 컨테이너를 동시에 실행할 수 있으며, 각 컨테이너는 독립적으로 실행되고 관리된다.

      DockerFile
      Dockerfile 은 도커 이미지를 자동으로 빌드하기 위한 스크립트 파일이다. 이 파일은 기본 이미지 설정, 실행할 명령어, 추가할 파일 및 디렉토리, 환경 변수 설정 등 이미지 생성에 필요한 지시어를 담고 있다.
      Dockerfile 은 docker build 명령어와 함께 사용되어 새로운 도커 이미지를 생성한다. Dockerfile 을 사용하면 애플리케이션의 배포 과정을 표준화하고 자동화할 수 있으며, 필요한 모든 설정과 의존성이 문서화되어 재현 가능하다.

      Docker Hub
      도커허브는 도커 이미지를 찾고, 공유하고, 관리할 수 있는 공식적인 클라우드 기반 서비스 및 저장소이다. 사용자는 도커허브에서 수많은 공개 도커 이미지를 무료로 다운로드할 수 있으며, 자신의 도커 이미
      지를 업로드하여 공개하거나 비공개로 저장할 수도 있다. 도커허브는 개발자와 조직이 컨테이너화된 애플리케이션을 쉽게 배포하고 공유할 수 있도록 지원하는 중앙 집중식 서비스이다. 도커허브는 또한 자동
      이미지 빌드, 웹훅, 조직 및 팀을 위한 협업 툴 등과 같은 추가 기능을 제공한다.

      Docker Registry
      도커 리지스트리는 도커 이미지를 저장하고 배포하기 위한 서버 측 응용 프로그램이다. 도커허브와 유사하게 동작하지만, 도커 리지스트리는 사용자가 자신의 서버에 직접 설치하여 개인 또는 조직 내부에서
      사용할 수 있는 프라이빗 저장소를 만들 수 있게 해준다. 이는 비공개 프로젝트나 내부적으로 사용되는 이미지를 안전하게 관리하고 싶은 조직에 적합한 솔루션이다. 도커 리지스트리는 보안, 액세스 제어, 저
      장소 한계 설정 등을 사용자가 직접 구성할 수 있게 해주며, 이를 통해 개인화된 컨테이너 이미지 저장소를 운영할 수 있다. 도커 리지스트리 소프트웨어는 오픈 소스이며, Docker Inc.에 의해 관리된다.


5. 실습 (dockerfile은 도커의 설정을 작성한다.)
  -. cd 로 작업할 폴더로 이동한다.
  -. git clone https://github.com/docker/welcome-to-docker (에서 샘플로 사용해보자) 로 샘플 프로젝트와 dockerfile 설정을 받아보자.
  -. cd welcom-to-docker (git에서 clone한 파일 경로 이동)
  -. docker build -t welcome-to-docker . 로 이미지 빌드하기.
  -. docker run --name apa02 -d -p 8080:80 httpd ("apa02"라는 이름을 가진 Apache HTTP Server 컨테이너를 데몬 모드로 실행하고, 호스트의 8080 포트를 컨테이너의 80 포트에 매핑하여 실행합니다.)
  -. docker stop apa02
  -. docker rm apa02
  -. docker ps -a (있는 컨테이너 조회)
  -. docker image ls (도커데몬에 어떤 이미지있는지 체크)
  -. docker iamge rm 이미지명 (이미지 삭제)


-------------------------- 수업중 들은 내용 -----------------------------
1. Docker, AWS[ECS], gitHubAuction의 장점?? 선택한 이유??
  -. 

2. 도커이미지, 도커 container, 도커파일, 도커허브, 도커 리지스트리,  도커엔진, 도커데몬 용어 이해하기.

3. 도커 실행 순서.
  3.1 이미지 다운로드 또는 빌드
  3.2 컨테이너 생성
  3.3 컨테이너 실행
  3.4 컨테이너 관리
  3.5 리소스 관리

4. docker 실전 연습 (이미지 띄우기) // GUI 환경에서
  4.1 docker 데스크탑 설치하기, gitBash 설치하기
  4.2 데스크탑을 설치 후 gitBash킨다.
  4.3 검색창에서 docker/welcome-to-docker 검색후 실행 >> host Port 입력 후 >> 실행 하면 실제로 이미지를 띄우게 된다.

  4.4 실습 3. 아파치 서버 띄우기 // CLI 환경에서
      docker run --name apa02 -d -p 8080:80 httpd
      docker ps
      localhost:8080 접속
      docker stop apa02
      docker rm apa02
      docker ps -a
      실습 4. 아파치 서버 여러대 띄우기
      
      docker run --name apa03 -d -p 8081:80 httpd
      docker run --name apa04 -d -p 8082:80 httpd
      docker run --name apa05 -d -p 8083:80 httpd
      docker ps
      localhost:808X 각 포트번호로 접속
      docker stop 컨테이너이름
      docker rm 컨테이너이름
      docker ps -a
      [자습문제] 실습 5. nginx 접속하기
      docker run --name nginx01 -d -p 8084:80 nginx
      docker ps
      localhost:808X 각 포트번호로 접속
      docker stop 컨테이너이름
      docker rm 컨테이너이름
      docker ps -a
      실습6. 이미지 삭제
      컨테이너 삭제 후 진행해야함
      docker rm 이미지이름 이미지이름 이미지이름
      docker ps -a
      docker image ls
      docker image rm httpd

5. 동작방식
    도커 엔진의 동작 방식은 기본적으로 컨테이너의 생명 주기 관리와 관련된 일련의 과정을 포함한다. 사용자 또는 애
    플리케이션은 도커 CLI 또는 API를 통해 도커 데몬과 상호작용하며, 도커 데몬은 이러한 명령을 수행하여 컨테이너
    를 생성, 실행, 중지 등의 작업을 관리한다. 이 과정에는 여러 단계가 포함되는데, 아래에서 구체적으로 살펴보겠다.

    1. 이미지 다운로드 또는 빌드: 컨테이너를 실행하기 전에, 도커 엔진은 해당 애플리케이션을 실행하는 데 필요한 모든
    파일과 설정이 포함된 도커 이미지가 필요하다. 사용자는 도커 허브나 다른 이미지 저장소에서 이미지를 다운로드하
    거나, Dockerfile 을 정의하고 이를 통해 새로운 이미지를 빌드할 수 있다.

    2. 컨테이너 생성: 이미지가 준비되면, 사용자는 도커 데몬에게 컨테이너 생성을 요청한다. 이때, 네트워크 설정이나 볼
    륨 마운트와 같은 추가적인 옵션을 지정할 수 있다. 도커 데몬은 이러한 정보를 바탕으로 새로운 컨테이너의 인스턴
    스를 생성한다.

    3. 컨테이너 실행: 컨테이너가 생성되면, 도커 데몬은 컨테이너 내부에서 정의된 애플리케이션을 실행한다. 이 과정에
    서 컨테이너는 독립된 파일 시스템, 네트워크 인터페이스, 프로세스 ID 공간 등을 갖게 되며, 이는 컨테이너를 호스
    트 시스템과 격리된 환경에서 실행되게 한다.

    4. 컨테이너 관리: 도커 엔진은 실행 중인 컨테이너의 상태를 모니터링하고 관리한다. 사용자는 도커 CLI를 통해 실행
    중인 컨테이너를 조회하고, 로그를 확인하며, 필요한 경우 컨테이너를 중지, 재시작 또는 삭제할 수 있다.

    5. 리소스 관리: 도커 엔진은 Cgroups와 네임스페이스와 같은 리눅스의 핵심 기능을 사용하여 컨테이너의 리소스 사
    용량을 제한하고, 컨테이너 간의 격리를 유지한다. 이를 통해 시스템의 안정성을 보장하고, 다른 컨테이너나 시스템
    전체에 부정적인 영향을 미치는 것을 방지한다.

    [용어] 다시 정리
        Docker Image
        도커 이미지는 컨테이너를 실행하기 위한 불변의 템플릿이다. 이 이미지는 애플리케이션 실행에 필요한
        모든 것을 포함한다 — 코드, 런타임, 애플리케이션과 관련된 라이브러리, 환경 변수 및 설정 파일 등. 도
        커 이미지는 여러 계층으로 구성되어 있으며, 각 계층은 변경 사항을 저장한다. 이미지는 컨테이너를 생
        성하는 데 사용되며, 일반적으로 도커허브와 같은 레지스트리에서 가져오거나 Dockerfile 을 사용해
        직접 빌드할 수 있다.

        Docker container
        도커 컨테이너는 도커 이미지의 실행 인스턴스이다. 컨테이너는 이미지를 기반으로 하여 실행되며, 격리
        된 환경에서 애플리케이션과 그 의존성을 캡슐화한다. 컨테이너는 가벼우며 시스템 리소스를 효율적으
        로 사용한다는 장점이 있다. 컨테이너는 시작될 때 생성되고 종료될 때 제거된다. 개발자는 동일한 이미
        지를 사용하여 여러 컨테이너를 동시에 실행할 수 있으며, 각 컨테이너는 독립적으로 실행되고 관리된
        다.

        DockerFile
        Dockerfile 은 도커 이미지를 자동으로 빌드하기 위한 스크립트 파일이다. 이 파일은 기본 이미지 설
        정, 실행할 명령어, 추가할 파일 및 디렉토리, 환경 변수 설정 등 이미지 생성에 필요한 지시어를 담고 있
        다. Dockerfile 은 docker build 명령어와 함께 사용되어 새로운 도커 이미지를 생성한다.
        Dockerfile 을 사용하면 애플리케이션의 배포 과정을 표준화하고 자동화할 수 있으며, 필요한 모든
        설정과 의존성이 문서화되어 재현 가능하다.

        Docker Hub
        도커허브는 도커 이미지를 찾고, 공유하고, 관리할 수 있는 공식적인 클라우드 기반 서비스 및 저장소이
        다. 사용자는 도커허브에서 수많은 공개 도커 이미지를 무료로 다운로드할 수 있으며, 자신의 도커 이미
        지를 업로드하여 공개하거나 비공개로 저장할 수도 있다. 도커허브는 개발자와 조직이 컨테이너화된 애
    
    중간 면접 질문
    
    실습
    
    플리케이션을 쉽게 배포하고 공유할 수 있도록 지원하는 중앙 집중식 서비스이다. 도커허브는 또한 자동
    이미지 빌드, 웹훅, 조직 및 팀을 위한 협업 툴 등과 같은 추가 기능을 제공한다.
    Docker Registry
    도커 리지스트리는 도커 이미지를 저장하고 배포하기 위한 서버 측 응용 프로그램이다. 도커허브와 유사
    하게 동작하지만, 도커 리지스트리는 사용자가 자신의 서버에 직접 설치하여 개인 또는 조직 내부에서
    사용할 수 있는 프라이빗 저장소를 만들 수 있게 해준다. 이는 비공개 프로젝트나 내부적으로 사용되는
    이미지를 안전하게 관리하고 싶은 조직에 적합한 솔루션이다. 도커 리지스트리는 보안, 액세스 제어, 저
    장소 한계 설정 등을 사용자가 직접 구성할 수 있게 해주며, 이를 통해 개인화된 컨테이너 이미지 저장소
    를 운영할 수 있다. 도커 리지스트리 소프트웨어는 오픈 소스이며, Docker Inc.에 의해 관리된다.


6. 프로젝트를 하면서 항상 왜 라는 이유를 찾아야 한다. , 그리고 이 기술 왜 사용하셨어요??

7. 도커를 이해할려면 서점에서 첫장을 보면 자세히 나와있다. , 그리고 홈페이지에서 어떤게 장점인지 자세히 잘 나와 있다.
